const express = require("express");
const crypto = require("crypto");
const { exec } = require("child_process");

const app = express();
app.use(express.json()); // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö payload'–æ–≤

const SECRET = "legal"; // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
function verifySignature(req, res, next) {
	const signature = req.headers["x-hub-signature-256"];
	if (!signature) {
		return res.status(401).send("Missing signature");
	}

	const hmac = crypto.createHmac("sha256", SECRET);
	const digest = "sha256=" + hmac.update(JSON.stringify(req.body)).digest("hex");

	if (signature !== digest) {
		return res.status(401).send("Invalid signature");
	}
	next();
}

// –§—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è
function deploy(script, res) {
	exec(`sh ${script}`, (error, stdout, stderr) => {
		if (error) {
			console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
			return res.status(500).send("–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è");
		}
		console.log(`stdout: ${stdout}`);
		if (stderr) console.error(`stderr: ${stderr}`);
		res.status(200).send("–î–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω");
	});
}

// –í–µ–±—Ö—É–∫ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
app.post("/whserver", verifySignature, (req, res) => {
	console.log("üöÄ –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞...");
	deploy("./server.sh", res);
});

// –í–µ–±—Ö—É–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
app.post("/whclient", verifySignature, (req, res) => {
	console.log("üöÄ –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞...");
	deploy("./client.sh", res);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 3001;
app.listen(PORT, () => console.log(`Webhook –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
